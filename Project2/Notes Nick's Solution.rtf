{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf760
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Notes Official Solution:\
\
1. Adding another layer of indirection.\
\
2. HMAC and PBKDF2.\
\
3. Nick Cheats: \
- Minimal design needed to get the desired functionality.\
\
Storing basic user data:\
\
(All keys)\
RSA Key \
Master Data - 128\
Master Mac - 128\
FS MAC - 128\
\
PBKDF(pass, user) - Used for Encryption, Macing, and Random Locations.\
\
Master Record: (Located at HMAC(filename, FSMAC))\
Data Key\
DataMac\
MD-Location\
- All encrypted with keys in user struct. \
\
Master Data Location goes to Metadata. Metadata points to specific data. \
\
The problem of switching around the locations of each data. You can use the existing key to XOR with the location count. MAC key is unique to each block of the file. The location of the file will be included into the HMAC process to determine where the file is located. \
\
(ShareKey | ShareMAC) is used to decrypt and verify the below information. \
DataKey\
DataMAC\
Location MetaData\
FromTo\
\
EP(ShareKey | ShareMAC | Location) This is the msgid (?) . \
Randomized Location. The msgid is located at a random location. \
\
From the above information, Bob uses this information to get all the necessary information to load, append, and modify.\
\
Revoke. Delete all of the metadata and the locations. Create another metadata and generate new keys. LoadFile, then call StoreFile. Just using StoreFile will allow us to create another file. \
\
}